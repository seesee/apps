const CACHE_NAME="activity-tracker-v1",urlsToCache=["./","./index.html","./sw.js"];function broadcastMessage(e){return clients.matchAll({type:"window"}).then(t=>{t.forEach(t=>{t.postMessage(e)})})}function generateId(){return Date.now().toString()+Math.random().toString(36).substr(2,9)}function extractHashtags(e){if(!e||"string"!=typeof e)return[];const t=/#([\w][\w-]*)/g,n=[],o=new Set;let i;for(;null!==(i=t.exec(e));){const e=i[1],t=e.toLowerCase();o.has(t)||(o.add(t),n.push(e))}return n}function isAppClient(e){try{const t=new URL(e),n=t.pathname,o=n.split("/").pop();return!!n.includes("/activity-tracker/")||("/"===n||""===n||t.origin===self.location.origin&&!(!o.startsWith("index.")||!o.endsWith(".html")))}catch(e){return!1}}function isAppOpen(){return clients.matchAll({type:"window"}).then(e=>e.some(e=>isAppClient(e.url)))}function getAppUrl(){const e=self.registration.scope;console.log("Service Worker scope:",e);try{new URL(e);return e}catch(e){return console.error("Error getting app URL from scope:",e),"./"}}self.addEventListener("install",e=>{console.log("Service Worker installing..."),e.waitUntil(caches.open(CACHE_NAME).then(e=>(console.log("Opened cache"),Promise.allSettled(urlsToCache.map(t=>e.add(t).catch(e=>(console.warn(`Failed to cache ${t}:`,e.message),null)))).then(e=>{const t=e.filter(e=>"fulfilled"===e.status).length,n=e.filter(e=>"rejected"===e.status).length;console.log(`Cache results: ${t} successful, ${n} failed`)}))).catch(e=>{console.error("Cache installation failed:",e)})),self.skipWaiting()}),self.addEventListener("activate",e=>(console.log("Service Worker activated"),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME)return console.log("Deleting old cache:",e),caches.delete(e)})))),self.clients.claim())),self.addEventListener("fetch",e=>{e.request.url.startsWith("http")&&e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).catch(t=>{if(console.warn("Fetch failed for:",e.request.url,t.message),"navigate"===e.request.mode)return new Response("App offline",{status:200,statusText:"OK",headers:{"Content-Type":"text/html"}});throw t})).catch(t=>(console.warn("Cache match failed for:",e.request.url,t.message),fetch(e.request))))}),self.addEventListener("notificationclick",e=>{console.log("Notification clicked:",e.notification.tag),e.notification.close(),"activity-reminder"===e.notification.tag&&e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then(e=>{for(const t of e)if(isAppClient(t.url))return console.log("Found existing client, focusing:",t.url),t.focus().then(()=>{t.postMessage({type:"navigate-to-tracker",source:"notification-click"})});if(console.log("No existing client found, opening new window"),clients.openWindow){const e=getAppUrl();return console.log("Opening URL:",e),clients.openWindow(e).then(e=>{e&&setTimeout(()=>{e.postMessage({type:"navigate-to-tracker",source:"notification-click"})},1e3)})}}).catch(e=>{console.error("Error handling notification click:",e)}))}),self.addEventListener("notificationactionclick",e=>{if(console.log("Notification action clicked:",e.action),e.notification.close(),"reply"===e.action){const t=e.reply;if(console.log("User replied:",t),t&&t.trim()){const n=new Date,o={id:generateId(),activity:t.trim(),description:"from notification",timestamp:n.toISOString(),created:n.toISOString(),isTodo:!1,isNote:!1,tags:extractHashtags(t.trim()),dueDate:null,startedAt:null};e.waitUntil(clients.matchAll({type:"window"}).then(e=>{let n=!1;for(const i of e)isAppClient(i.url)&&(i.postMessage({type:"add-entry",entry:o}),i.postMessage({type:"populate-activity-input",text:t.trim()}),n=!0);if(!n){const e=getAppUrl();return clients.openWindow(e).then(e=>{e&&setTimeout(()=>{e.postMessage({type:"add-entry",entry:o}),e.postMessage({type:"populate-activity-input",text:t.trim(),source:"notification-action"})},2e3)})}}))}}else"open"===e.action&&e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then(e=>{for(const t of e)if(isAppClient(t.url))return console.log("Found existing client, focusing:",t.url),t.focus().then(()=>{t.postMessage({type:"navigate-to-tracker",source:"notification-action-open"})});if(console.log("No existing client found, opening new window"),clients.openWindow){const e=getAppUrl();return console.log("Opening URL:",e),clients.openWindow(e).then(e=>{e&&setTimeout(()=>{e.postMessage({type:"navigate-to-tracker",source:"notification-action-open"})},1e3)})}}).catch(e=>{console.error("Error handling notification open action:",e)}))}),self.addEventListener("push",e=>{console.log("Push message received");let t={};if(e.data)try{t=e.data.json()}catch(n){t={title:"Activity Tracker",body:e.data.text()}}const n={body:t.body||"New notification from Activity Tracker",icon:'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23667eea"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>',badge:'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23667eea"><circle cx="12" cy="12" r="10"/></svg>',tag:t.tag||"push-notification",requireInteraction:!0,actions:[{action:"reply",type:"text",title:"Log Activity",placeholder:"What are you working on?"},{action:"dismiss",title:"Dismiss"}],data:t};e.waitUntil(self.registration.showNotification(t.title||"Activity Tracker",n))}),self.addEventListener("sync",e=>{console.log("Background sync triggered:",e.tag),"sync-activities"===e.tag&&e.waitUntil(Promise.resolve().then(()=>{console.log("Activities synced")}))}),self.addEventListener("message",e=>{console.log("Message received in SW:",e.data),e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"GET_VERSION"===e.data.type&&e.ports[0].postMessage({version:CACHE_NAME})}),self.addEventListener("error",e=>{console.error("Service Worker error:",e.error)}),self.addEventListener("unhandledrejection",e=>{console.error("Service Worker unhandled rejection:",e.reason)}),console.log("Service Worker loaded");